apply from: file("${rootDir}/gradle/project.gradle")
apply from: file("${rootDir}/gradle/publish.gradle")

subprojects {
    group = 'core.framework'
    version = '7.10.3-b0'

    repositories {
        maven {
            url 'https://neowu.github.io/maven-repo/'
            content {
                includeGroupByRegex 'core\\.framework.*'       // for elasticsearch modules dependencies
            }
        }
    }
}

def elasticVersion = '8.0.0'
def kafkaVersion = '3.1.0'
def jacksonVersion = '2.13.1'
def junitVersion = '5.8.2'
def mockitoVersion = '4.3.1'
def assertjVersion = '3.22.0'
def mysqlVersion = '8.0.28'

project('core-ng-api') {
    apply from: file("${rootDir}/gradle/lib.gradle")
}

project('core-ng') {
    apply from: file("${rootDir}/gradle/lib.gradle")
    dependencies {
        api project(":core-ng-api")
        api project(":core-ng-json")
        api project(":core-ng-common")
        api 'org.slf4j:slf4j-api:1.8.0-beta4'
        implementation 'org.javassist:javassist:3.28.0-GA'
        implementation "com.fasterxml.jackson.module:jackson-module-afterburner:${jacksonVersion}"
        implementation "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:${jacksonVersion}"
        implementation 'com.squareup.okhttp3:okhttp:4.9.3'
        implementation 'io.undertow:undertow-core:2.2.16.Final'
        implementation "org.apache.kafka:kafka-clients:${kafkaVersion}@jar"
        implementation 'org.xerial.snappy:snappy-java:1.1.8.4'      // used by kafka message compression
        compileOnly "mysql:mysql-connector-java:${mysqlVersion}"
        compileOnly 'org.jboss.logging:jboss-logging-annotations:2.2.1.Final'
        testImplementation "org.junit.jupiter:junit-jupiter-api:${junitVersion}"
        testImplementation "org.mockito:mockito-junit-jupiter:${mockitoVersion}"
        testImplementation "org.assertj:assertj-core:${assertjVersion}"
        testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${junitVersion}"
        testRuntimeOnly 'org.hsqldb:hsqldb:2.6.0'
    }
}

project('core-ng-test') {
    apply from: file("${rootDir}/gradle/lib.gradle")
    dependencies {
        api "org.junit.jupiter:junit-jupiter-api:${junitVersion}"
        api "org.mockito:mockito-junit-jupiter:${mockitoVersion}"
        api "org.assertj:assertj-core:${assertjVersion}"
        implementation project(":core-ng")
        implementation "org.junit.jupiter:junit-jupiter-engine:${junitVersion}"
        implementation "org.apache.kafka:kafka-clients:${kafkaVersion}@jar"
        testRuntimeOnly 'org.hsqldb:hsqldb:2.6.0'
    }
}

project('core-ng-json') {
    apply from: file("${rootDir}/gradle/lib.gradle")
    dependencies {
        api project(":core-ng-api")
        implementation project(":core-ng-common")
        implementation "com.fasterxml.jackson.module:jackson-module-afterburner:${jacksonVersion}"
        implementation "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:${jacksonVersion}"
        testImplementation "org.junit.jupiter:junit-jupiter-api:${junitVersion}"
        testImplementation "org.assertj:assertj-core:${assertjVersion}"
        testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${junitVersion}"
    }
}

project('core-ng-common') {
    apply from: file("${rootDir}/gradle/lib.gradle")
    dependencies {
        api 'org.slf4j:slf4j-api:1.8.0-beta4'
        testImplementation "org.junit.jupiter:junit-jupiter-api:${junitVersion}"
        testImplementation "org.assertj:assertj-core:${assertjVersion}"
        testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${junitVersion}"
    }
}

project('core-ng-mongo') {
    apply from: file("${rootDir}/gradle/lib.gradle")
    dependencies {
        api project(":core-ng")
        api 'org.mongodb:mongodb-driver-sync:4.3.0'
        testImplementation project(":core-ng-test")
    }
}

project('core-ng-mongo-test') {
    apply from: file("${rootDir}/gradle/lib.gradle")
    dependencies {
        implementation project(":core-ng-test")
        implementation project(":core-ng-mongo")
        implementation 'de.bwaldvogel:mongo-java-server:1.39.0'
    }
}

project('core-ng-search') {
    apply from: file("${rootDir}/gradle/lib.gradle")
    dependencies {
        api project(":core-ng")
        api "co.elastic.clients:elasticsearch-java:${elasticVersion}"
        implementation "com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}"
        testImplementation project(":core-ng-test")
    }
}

project('core-ng-search-test') {
    apply from: file("${rootDir}/gradle/lib.gradle")
    dependencies {
        implementation project(":core-ng-test")
        implementation project(":core-ng-search")
        implementation "org.elasticsearch:elasticsearch:${elasticVersion}"
        implementation "core.framework.elasticsearch.module:transport-netty4:${elasticVersion}"
        implementation "core.framework.elasticsearch.module:mapper-extras:${elasticVersion}"    // used by elasticsearch scaled_float
        implementation "core.framework.elasticsearch.module:lang-painless:${elasticVersion}"
        implementation "core.framework.elasticsearch.module:analysis-common:${elasticVersion}"  // used by elasticsearch stemmer
        implementation "com.fasterxml.jackson.core:jackson-core:${jacksonVersion}"              // override transitive jackson dependencies of elasticsearch, only for intellij, gradle woks fine
    }
}

def mavenURL = hasProperty('mavenURL') ? mavenURL : null    // usage: "gradlew -PmavenURL=/path clean publish"

configure(subprojects.findAll { it.name.startsWith('core-ng') }) {
    apply plugin: 'maven-publish'
    if (mavenURL != null) {
        assert project.file(mavenURL).exists()
        publishing {
            publications {
                maven(MavenPublication) {
                    from components.java
                }
            }
            repositories {
                maven { url mavenURL }
            }
        }
    }
}
